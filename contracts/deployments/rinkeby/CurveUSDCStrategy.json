{
  "address": "0xC9f3F3cB556976896080A23E7C121Bf04E4851F8",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "collectRewardToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvGaugeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvMinterAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        }
      ],
      "name": "setRewardTokenAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRewardLiquidationThreshold",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x8fc6f1d3b1395f44c97c8f7f40c9c02f9338b9706e9fb9eef4fde622d54571db",
  "receipt": {
    "to": null,
    "from": "0xD85A569F3C26f81070544451131c742283360400",
    "contractAddress": "0xC9f3F3cB556976896080A23E7C121Bf04E4851F8",
    "transactionIndex": 1,
    "gasUsed": "2499134",
    "logsBloom": "0x00000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000200008000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000008010000000000000000000000000000000000000000020000000000000000000000000000000000000000400000000000000000000000000",
    "blockHash": "0xde641cb09febd578fe85282c80b7af1ef4bd769adbd55f19e5f689035cdf8dfa",
    "transactionHash": "0x8fc6f1d3b1395f44c97c8f7f40c9c02f9338b9706e9fb9eef4fde622d54571db",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8045955,
        "transactionHash": "0x8fc6f1d3b1395f44c97c8f7f40c9c02f9338b9706e9fb9eef4fde622d54571db",
        "address": "0xC9f3F3cB556976896080A23E7C121Bf04E4851F8",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d85a569f3c26f81070544451131c742283360400"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde641cb09febd578fe85282c80b7af1ef4bd769adbd55f19e5f689035cdf8dfa"
      }
    ],
    "blockNumber": 8045955,
    "cumulativeGasUsed": "2526484",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c3af786fe12b6b771320281cb59e3482",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"collectRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvGaugeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvMinterAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRewardLiquidationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform This includes any interest that was generated since depositing We calculate this by calculating a what we would get if we withdrawAlld the allocated percentage of this asset.\",\"params\":{\"_asset\":\"Address of the asset\"},\"return\":\"balance    Total value of the asset in the platform\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardToken()\":{\"details\":\"Collect accumulated CRV and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into the Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address,address,address,address,address)\":{\"params\":{\"_asset\":\"Address of the supported asset\",\"_crvGaugeAddress\":\"Address of the Curve DAO gauge for this pool\",\"_crvMinterAddress\":\"Address of the CRV minter for rewards\",\"_pToken\":\"Correspond platform token address (i.e. 3Crv)\",\"_platformAddress\":\"Address of the Curve 3pool\",\"_rewardTokenAddress\":\"Address of CRV\",\"_vaultAddress\":\"Address of the vault\"}},\"initialize(address,address,address,address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"jGeneric platform address\",\"_rewardTokenAddress\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.     This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding pool tokens,     if for some reason is it necessary.\"},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.     This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardLiquidationThreshold(uint256)\":{\"details\":\"Set the reward token liquidation threshold.\",\"params\":{\"_threshold\":\"Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls.\"}},\"setRewardTokenAddress(address)\":{\"details\":\"Set the reward token address.\",\"params\":{\"_rewardTokenAddress\":\"Address of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in     strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}}},\"userdoc\":{\"methods\":{\"initialize(address,address,address,address,address,address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ThreePoolStrategy.sol\":\"ThreePoolStrategy\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/governance/Governable.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32\\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32\\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32\\n        private constant reentryStatusPosition = 0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() internal {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x3e51ea48102945bf4b305bf9722a07514a585a29555d92f8c84352d1a4cfcee1\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x01eab42b6d54fa5389598e0663c24680ecc017e2da848e8ea1c40aeaa8225eef\"},\"contracts/strategies/ICRVMinter.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface ICRVMinter {\\n    function mint(address gaugeAddress) external;\\n}\\n\",\"keccak256\":\"0xcb83e2b54eed241e5957ec27dcbdc1b6305c66d0c65600e1ba6b29c82f58930b\"},\"contracts/strategies/ICurveGauge.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface ICurveGauge {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function deposit(uint256 value, address account) external;\\n\\n    function withdraw(uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3a007f258521d7321edce1c54e8e7a78cfbdd472d9180121b319420f525a79a4\"},\"contracts/strategies/ICurvePool.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min) external;\\n\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 _index,\\n        uint256 _minAmount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _amount, int128 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function coins(uint256 _index) external view returns (address);\\n}\\n\",\"keccak256\":\"0x86511ff6014b70ea12b2b8b9498c01043f10cdb50ac76102b4fc65869bb809ce\"},\"contracts/strategies/ThreePoolStrategy.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title Curve 3Pool Strategy\\n * @notice Investment strategy for investing stablecoins via Curve 3Pool\\n * @author Origin Protocol Inc\\n */\\n\\nimport { ICurvePool } from \\\"./ICurvePool.sol\\\";\\nimport { ICurveGauge } from \\\"./ICurveGauge.sol\\\";\\nimport { ICRVMinter } from \\\"./ICRVMinter.sol\\\";\\nimport {\\n    IERC20,\\n    InitializableAbstractStrategy\\n} from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\n\\ncontract ThreePoolStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n\\n    event RewardTokenCollected(address recipient, uint256 amount);\\n\\n    address crvGaugeAddress;\\n    address crvMinterAddress;\\n    int128 poolCoinIndex = -1;\\n    uint256 constant maxSlippage = 1e16; // 1%, same as the Curve UI\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as Curve strategies don't fit\\n     * well within that abstraction.\\n     * @param _platformAddress Address of the Curve 3pool\\n     * @param _vaultAddress Address of the vault\\n     * @param _rewardTokenAddress Address of CRV\\n     * @param _asset Address of the supported asset\\n     * @param _pToken Correspond platform token address (i.e. 3Crv)\\n     * @param _crvGaugeAddress Address of the Curve DAO gauge for this pool\\n     * @param _crvMinterAddress Address of the CRV minter for rewards\\n     */\\n    function initialize(\\n        address _platformAddress, // 3Pool address\\n        address _vaultAddress,\\n        address _rewardTokenAddress, // CRV\\n        address _asset,\\n        address _pToken,\\n        address _crvGaugeAddress,\\n        address _crvMinterAddress\\n    ) external onlyGovernor initializer {\\n        ICurvePool threePool = ICurvePool(_platformAddress);\\n        for (int128 i = 0; i < 3; i++) {\\n            if (threePool.coins(uint256(i)) == _asset) poolCoinIndex = i;\\n        }\\n        require(poolCoinIndex != -1, \\\"Invalid 3pool asset\\\");\\n        crvGaugeAddress = _crvGaugeAddress;\\n        crvMinterAddress = _crvMinterAddress;\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddress,\\n            _asset,\\n            _pToken\\n        );\\n    }\\n\\n    /**\\n     * @dev Collect accumulated CRV and send to Vault.\\n     */\\n    function collectRewardToken() external onlyVault nonReentrant {\\n        IERC20 crvToken = IERC20(rewardTokenAddress);\\n        ICRVMinter minter = ICRVMinter(crvMinterAddress);\\n        uint256 balance = crvToken.balanceOf(address(this));\\n        emit RewardTokenCollected(vaultAddress, balance);\\n        minter.mint(crvGaugeAddress);\\n        crvToken.safeTransfer(vaultAddress, balance);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into the Curve 3Pool\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        emit Deposit(_asset, address(platformAddress), _amount);\\n        // 3Pool requires passing deposit amounts for all 3 assets, set to 0 for\\n        // all\\n        uint256[3] memory _amounts;\\n        // Set the amount on the asset we want to deposit\\n        _amounts[uint256(poolCoinIndex)] = _amount;\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\n        uint256 depositValue = _amount\\n            .scaleBy(int8(18 - assetDecimals))\\n            .divPrecisely(curvePool.get_virtual_price());\\n        uint256 minMintAmount = depositValue.mulTruncate(\\n            uint256(1e18).sub(maxSlippage)\\n        );\\n        // Do the deposit to 3pool\\n        curvePool.add_liquidity(_amounts, minMintAmount);\\n        // Deposit into Gauge\\n        IERC20 pToken = IERC20(assetToPToken[_asset]);\\n        ICurveGauge(crvGaugeAddress).deposit(\\n            pToken.balanceOf(address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from Curve 3Pool\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external onlyVault nonReentrant {\\n        require(_recipient != address(0), \\\"Invalid recipient\\\");\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        emit Withdrawal(_asset, address(assetToPToken[_asset]), _amount);\\n\\n        // Calculate how much of the pool token we need to withdraw\\n        (uint256 contractPTokens, , uint256 totalPTokens) = _getTotalPTokens();\\n        // Calculate the max amount of the asset we'd get if we withdrew all the\\n        // platform tokens\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        uint256 maxAmount = curvePool.calc_withdraw_one_coin(\\n            totalPTokens,\\n            poolCoinIndex\\n        );\\n        // Calculate how many platform tokens we need to withdraw the asset amount\\n        uint256 withdrawPTokens = totalPTokens.mul(_amount).div(maxAmount);\\n        if (contractPTokens < withdrawPTokens) {\\n            // Not enough of pool token exists on this contract, must be staked\\n            // in Gauge, unstake\\n            ICurveGauge(crvGaugeAddress).withdraw(withdrawPTokens);\\n        }\\n        uint256 minWithdrawAmount = withdrawPTokens.mulTruncate(\\n            uint256(1e18).sub(maxSlippage)\\n        );\\n        curvePool.remove_liquidity_one_coin(\\n            withdrawPTokens,\\n            poolCoinIndex,\\n            minWithdrawAmount\\n        );\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n        // Transfer any leftover dust back to the vault buffer.\\n        uint256 dust = IERC20(_asset).balanceOf(address(this));\\n        if (dust > 0) {\\n            IERC20(_asset).safeTransfer(vaultAddress, dust);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external onlyVaultOrGovernor nonReentrant {\\n        // Withdraw all from Gauge\\n        (, uint256 gaugePTokens, ) = _getTotalPTokens();\\n        ICurveGauge(crvGaugeAddress).withdraw(gaugePTokens);\\n        // Remove entire balance, 3pool strategies only support a single asset\\n        // so safe to use assetsMapped[0]\\n        IERC20 asset = IERC20(assetsMapped[0]);\\n        uint256 pTokenBalance = IERC20(assetToPToken[address(asset)]).balanceOf(\\n            address(this)\\n        );\\n        uint256 minWithdrawAmount = pTokenBalance.mulTruncate(\\n            uint256(1e18).sub(maxSlippage)\\n        );\\n        ICurvePool(platformAddress).remove_liquidity_one_coin(\\n            pTokenBalance,\\n            poolCoinIndex,\\n            minWithdrawAmount\\n        );\\n        // Transfer the asset out to Vault\\n        asset.safeTransfer(vaultAddress, asset.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     *  This includes any interest that was generated since depositing\\n     *  We calculate this by calculating a what we would get if we withdrawAlld\\n     *  the allocated percentage of this asset.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        require(assetToPToken[_asset] != address(0), \\\"Unsupported asset\\\");\\n        // LP tokens in this contract. This should generally be nothing as we\\n        // should always stake the full balance in the Gauge, but include for\\n        // safety\\n        (, , uint256 totalPTokens) = _getTotalPTokens();\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n\\n        uint256 pTokenTotalSupply = IERC20(assetToPToken[_asset]).totalSupply();\\n        if (pTokenTotalSupply > 0) {\\n            uint256 curveBalance = IERC20(_asset).balanceOf(address(curvePool));\\n            if (curveBalance > 0) {\\n                balance = totalPTokens.mul(curveBalance).div(pTokenTotalSupply);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset) external view returns (bool) {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding pool tokens,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens() external {\\n        // This strategy is a special case since it only supports one asset\\n        address assetAddress = assetsMapped[0];\\n        _abstractSetPToken(assetAddress, assetToPToken[assetAddress]);\\n    }\\n\\n    /**\\n     * @dev Calculate the total platform token balance (i.e. 3CRV) that exist in\\n     * this contract or is staked in the Gauge (or in other words, the total\\n     * amount platform tokens we own).\\n     * @return totalPTokens Total amount of platform tokens in native decimals\\n     */\\n    function _getTotalPTokens()\\n        internal\\n        view\\n        returns (\\n            uint256 contractPTokens,\\n            uint256 gaugePTokens,\\n            uint256 totalPTokens\\n        )\\n    {\\n        contractPTokens = IERC20(assetToPToken[assetsMapped[0]]).balanceOf(\\n            address(this)\\n        );\\n        ICurveGauge gauge = ICurveGauge(crvGaugeAddress);\\n        gaugePTokens = gauge.balanceOf(address(this));\\n        totalPTokens = contractPTokens.add(gaugePTokens);\\n    }\\n\\n    /**\\n     * @dev Call the necessary approvals for the Curve pool and gauge\\n     * @param _asset Address of the asset\\n     * @param _pToken Address of the corresponding platform token (i.e. 3CRV)\\n     */\\n    function _abstractSetPToken(address _asset, address _pToken) internal {\\n        IERC20 asset = IERC20(_asset);\\n        IERC20 pToken = IERC20(_pToken);\\n        // 3Pool for asset (required for adding liquidity)\\n        asset.safeApprove(platformAddress, 0);\\n        asset.safeApprove(platformAddress, uint256(-1));\\n        // 3Pool for LP token (required for removing liquidity)\\n        pToken.safeApprove(platformAddress, 0);\\n        pToken.safeApprove(platformAddress, uint256(-1));\\n        // Gauge for LP token\\n        pToken.safeApprove(crvGaugeAddress, 0);\\n        pToken.safeApprove(crvGaugeAddress, uint256(-1));\\n    }\\n}\\n\",\"keccak256\":\"0xdf178e7c2cccae2e85742fbea319d017f9ea3b26f9a58ac88b9410b41608f557\"},\"contracts/utils/Helpers.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xd2ca92e0af883dc1aec5b22caced274e59829e0e30a9e955dcc48b8d921f5cdc\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\ncontract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(address recipient, uint256 amount);\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Reward token address\\n    address public rewardTokenAddress;\\n    uint256 public rewardLiquidationThreshold;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress jGeneric platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddress Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address _rewardTokenAddress,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddress,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token (COMP) and send to Vault.\\n     */\\n    function collectRewardToken() external onlyVault nonReentrant {\\n        IERC20 rewardToken = IERC20(rewardTokenAddress);\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        emit RewardTokenCollected(vaultAddress, balance);\\n        rewardToken.safeTransfer(vaultAddress, balance);\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address _rewardTokenAddress,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddress = _rewardTokenAddress;\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Single asset variant of the internal initialize.\\n     */\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address _rewardTokenAddress,\\n        address _asset,\\n        address _pToken\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddress = _rewardTokenAddress;\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token address.\\n     * @param _rewardTokenAddress Address of the reward token\\n     */\\n    function setRewardTokenAddress(address _rewardTokenAddress)\\n        external\\n        onlyGovernor\\n    {\\n        rewardTokenAddress = _rewardTokenAddress;\\n    }\\n\\n    /**\\n     * @dev Set the reward token liquidation threshold.\\n     * @param _threshold Threshold amount in decimals of reward token that will\\n     * cause the Vault to claim and withdrawAll on allocate() calls.\\n     */\\n    function setRewardLiquidationThreshold(uint256 _threshold)\\n        external\\n        onlyGovernor\\n    {\\n        rewardLiquidationThreshold = _threshold;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken) internal;\\n\\n    function safeApproveAllTokens() external;\\n\\n    /**\\n     * @dev Deposit a amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcc2a446777edd6ee5fcba89896640b34f7e1017fa5ace8883b8a92f6e97d7e43\"},\"contracts/utils/StableMath.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\\n     */\\n    function scaleBy(uint256 x, int8 adjustment)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (adjustment > 0) {\\n            x = x.mul(10**uint256(adjustment));\\n        } else if (adjustment < 0) {\\n            x = x.div(10**uint256(adjustment * -1));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0xa77fccf850feb6d54ba3a6530f92554caef8a67a1ceb573d4f8a5d1bf64ff9d2\"}},\"version\":1}",
  "bytecode": "0x6080604052603b80546001600160801b0319166001600160801b0317905562000031336001600160e01b036200008a16565b620000446001600160e01b036200009d16565b6001600160a01b031660006001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3620000b1565b60008051602062002c2b83398151915255565b60008051602062002c2b8339815191525490565b612b6a80620000c16000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80635f515226116100c3578063ad1728cb1161007c578063ad1728cb14610444578063c7af33521461044c578063cd3b021214610454578063d38bfff414610471578063d9caed1214610497578063dbe55e56146104cd5761014d565b80635f515226146102b6578063790fcf9f146102dc578063853828b6146103bf5780639136616a146103c75780639a6acf20146103e4578063aa388af61461040a5761014d565b8063125f9e3311610115578063125f9e33146102005780633587647614610208578063430bf08a1461026057806347e7ef24146102685780635653b414146102945780635d36b190146102ae5761014d565b80630242241d146101525780630c340a241461015c5780630ed57b3a146101805780630fc3b4c4146101ae5780631072cbea146101d4575b600080fd5b61015a6104d5565b005b6101646106e7565b604080516001600160a01b039092168252519081900360200190f35b61015a6004803603604081101561019657600080fd5b506001600160a01b03813581169160200135166106f6565b610164600480360360208110156101c457600080fd5b50356001600160a01b031661074b565b61015a600480360360408110156101ea57600080fd5b506001600160a01b038135169060200135610766565b6101646107cf565b61015a600480360360e081101561021e57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c090910135166107de565b610164610a39565b61015a6004803603604081101561027e57600080fd5b506001600160a01b038135169060200135610a48565b61029c610e1c565b60408051918252519081900360200190f35b61015a610e22565b61029c600480360360208110156102cc57600080fd5b50356001600160a01b0316610e84565b61015a600480360360a08110156102f257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561032e57600080fd5b82018360208201111561034057600080fd5b8035906020019184602083028401116401000000008311171561036257600080fd5b91939092909160208101903564010000000081111561038057600080fd5b82018360208201111561039257600080fd5b803590602001918460208302840111640100000000831117156103b457600080fd5b50909250905061103e565b61015a61119d565b61015a600480360360208110156103dd57600080fd5b50356114be565b61015a600480360360208110156103fa57600080fd5b50356001600160a01b0316611689565b6104306004803603602081101561042057600080fd5b50356001600160a01b03166116f2565b604080519115158252519081900360200190f35b61015a611712565b61043061175b565b61015a6004803603602081101561046a57600080fd5b503561177e565b61015a6004803603602081101561048757600080fd5b50356001600160a01b03166117ca565b61015a600480360360608110156104ad57600080fd5b506001600160a01b03813581169160208101359091169060400135611864565b610164611c90565b6034546001600160a01b0316331461052e576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415610586576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255603754603a54604080516370a0823160e01b815230600482015290516001600160a01b03938416939092169160009184916370a0823191602480820192602092909190829003018186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d602081101561060b57600080fd5b5051603454604080516001600160a01b0390921682526020820183905280519293507f9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e5205892918290030190a1603954604080516335313c2160e11b81526001600160a01b039283166004820152905191841691636a6278429160248082019260009290919082900301818387803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b50506034546106dc92506001600160a01b038681169250168363ffffffff611c9f16565b505050600182555050565b60006106f1611cf6565b905090565b6106fe61175b565b61073d576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b6107478282611d1b565b5050565b6035602052600090815260409020546001600160a01b031681565b61076e61175b565b6107ad576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b6107476107b86106e7565b6001600160a01b038416908363ffffffff611c9f16565b6037546001600160a01b031681565b6107e661175b565b610825576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b600054610100900460ff168061083e575061083e611e8a565b8061084c575060005460ff16155b6108875760405162461bcd60e51b815260040180806020018281038252602e815260200180612a78602e913960400191505060405180910390fd5b600054610100900460ff161580156108b2576000805460ff1961ff0019909116610100171660011790555b8760005b600381600f0b121561098857866001600160a01b0316826001600160a01b031663c661065783600f0b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561091357600080fd5b505afa158015610927573d6000803e3d6000fd5b505050506040513d602081101561093d57600080fd5b50516001600160a01b0316141561098057603b80546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff600f84900b161790555b6001016108b6565b50603b54600f90810b900b60001914156109df576040805162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b604482015290519081900360640190fd5b603980546001600160a01b038087166001600160a01b031992831617909255603a805492861692909116919091179055610a1c8989898989611e90565b508015610a2f576000805461ff00191690555b5050505050505050565b6034546001600160a01b031681565b6034546001600160a01b03163314610aa1576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415610af9576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560008311610b4b576040805162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015290519081900360640190fd5b603354604080516001600160a01b039283168152602081018690528151928716927f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62929181900390910190a2610b9f6129ac565b603b5484908290600f90810b900b60038110610bb757fe5b60200201526033546001600160a01b03166000610bd387611ede565b90506000610c5f836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d6020811015610c3d57600080fd5b5051610c5389601286900363ffffffff611f9e16565b9063ffffffff611ff816565b90506000610c92610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b839063ffffffff61207616565b604051634515cef360e01b81529091506001600160a01b03851690634515cef390879084906004018083606080838360005b83811015610cdc578181015183820152602001610cc4565b5050505090500182815260200192505050600060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b5050506001600160a01b03808b166000908152603560209081526040918290205460395483516370a0823160e01b81523060048201529351918516955090931692636e553f659285926370a0823192602480840193829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051604080516001600160e01b031960e085901b168152600481019290925230602483015251604480830192600092919082900301818387803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050505050505050506001825550505050565b60385481565b610e2a61208b565b6001600160a01b0316336001600160a01b031614610e795760405162461bcd60e51b8152600401808060200182810382526030815260200180612b066030913960400191505060405180910390fd5b610e82336120b0565b565b6001600160a01b03818116600090815260356020526040812054909116610ee6576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b6000610ef061215b565b6033546001600160a01b0387811660009081526035602090815260408083205481516318160ddd60e01b81529151969950948416975091955092909116926318160ddd92600480840193919291829003018186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d6020811015610f7b57600080fd5b505190508015611036576000856001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d602081101561100757600080fd5b5051905080156110345761103182611025868463ffffffff61229716565b9063ffffffff6122f016565b94505b505b505050919050565b61104661175b565b611085576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b600054610100900460ff168061109e575061109e611e8a565b806110ac575060005460ff16155b6110e75760405162461bcd60e51b815260040180806020018281038252602e815260200180612a78602e913960400191505060405180910390fd5b600054610100900460ff16158015611112576000805460ff1961ff0019909116610100171660011790555b61118288888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061233292505050565b8015610a2f576000805461ff00191690555050505050505050565b6034546001600160a01b03163314806111ce57506111b96106e7565b6001600160a01b0316336001600160a01b0316145b6112095760405162461bcd60e51b81526004018080602001828103825260238152602001806129cb6023913960400191505060405180910390fd5b6000805160206129ee83398151915280546002811415611261576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255600061126f61215b565b5060395460408051632e1a7d4d60e01b81526004810184905290519294506001600160a01b039091169250632e1a7d4d91602480830192600092919082900301818387803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b50505050600060366000815481106112e857fe5b60009182526020808320909101546001600160a01b039081168084526035835260408085205481516370a0823160e01b81523060048201529151929650909216926370a082319260248082019391829003018186803b15801561134a57600080fd5b505afa15801561135e573d6000803e3d6000fd5b505050506040513d602081101561137457600080fd5b50519050600061139c610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b603354603b5460408051630d2680e960e11b815260048101879052600f92830b830b90920b602483015260448201849052519293506001600160a01b0390911691631a4d01d29160648082019260009290919082900301818387803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b5050603454604080516370a0823160e01b815230600482015290516114b294506001600160a01b039283169350918716916370a0823191602480820192602092909190829003018186803b15801561146f57600080fd5b505afa158015611483573d6000803e3d6000fd5b505050506040513d602081101561149957600080fd5b50516001600160a01b038616919063ffffffff611c9f16565b50505050600182555050565b6114c661175b565b611505576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603654811061154b576040805162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015290519081900360640190fd5b60006036828154811061155a57fe5b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690600019018310156115fd576036805460001981019081106115a857fe5b600091825260209091200154603680546001600160a01b0390921691859081106115ce57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061160857fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260358552604092839020805490941690935581519085168152905191927f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c92918290030190a2505050565b61169161175b565b6116d0576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0390811660009081526035602052604090205416151590565b6000603660008154811061172257fe5b60009182526020808320909101546001600160a01b03908116808452603590925260409092205490925061175891839116612409565b50565b6000611765611cf6565b6001600160a01b0316336001600160a01b031614905090565b61178661175b565b6117c5576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603855565b6117d261175b565b611811576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b61181a816124dc565b806001600160a01b031661182c611cf6565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118bd576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415611915576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556001600160a01b038516611968576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015290519081900360640190fd5b600083116119ae576040805162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015290519081900360640190fd5b6001600160a01b03808516600081815260356020908152604091829020548251941684528301869052805191927f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398929081900390910190a2600080611a1161215b565b603354603b546040805163cc2b27d760e01b815260048101859052600f92830b830b90920b6024830152519496509194506001600160a01b03169260009250839163cc2b27d7916044808301926020929190829003018186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d6020811015611aa157600080fd5b505190506000611abb82611025868b63ffffffff61229716565b905080851015611b2b5760395460408051632e1a7d4d60e01b81526004810184905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505050505b6000611b4f610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b603b5460408051630d2680e960e11b815260048101869052600f92830b830b90920b602483015260448201839052519192506001600160a01b03861691631a4d01d29160648082019260009290919082900301818387803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b50611be0925050506001600160a01b038b168c8b611c9f565b604080516370a0823160e01b815230600482015290516000916001600160a01b038d16916370a0823191602480820192602092909190829003018186803b158015611c2a57600080fd5b505afa158015611c3e573d6000803e3d6000fd5b505050506040513d6020811015611c5457600080fd5b505190508015611c7e57603454611c7e906001600160a01b038d811691168363ffffffff611c9f16565b50505050505050600182555050505050565b6033546001600160a01b031681565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cf1908490612500565b505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6001600160a01b038281166000908152603560205260409020541615611d7d576040805162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b6001600160a01b03821615801590611d9d57506001600160a01b03811615155b611de2576040805162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015290519081900360640190fd5b6001600160a01b03808316600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8909301805490951684179094558351918252925191927fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e76592918290030190a26107478282612409565b303b1590565b603380546001600160a01b038088166001600160a01b031992831617909255603480548784169083161790556037805492861692909116919091179055611ed78282611d1b565b5050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6020811015611f4457600080fd5b505160ff16905060048110801590611f5d575060128111155b611f985760405162461bcd60e51b8152600401808060200182810382526029815260200180612a0e6029913960400191505060405180910390fd5b92915050565b6000808260000b1315611fc957611fc283600084900b600a0a63ffffffff61229716565b9250611ff1565b60008260000b1215611ff157611fee836000848103900b600a0a63ffffffff6122f016565b92505b5090919050565b60008061201384670de0b6b3a764000063ffffffff61229716565b9050612025818463ffffffff6122f016565b949350505050565b600061206f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126b8565b9392505050565b600061206f8383670de0b6b3a764000061274f565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b03811661210b576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b031661211d611cf6565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36117588161277d565b600080600060356000603660008154811061217257fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091205482516370a0823160e01b815230600482015292519316926370a08231926024808201939291829003018186803b1580156121d657600080fd5b505afa1580156121ea573d6000803e3d6000fd5b505050506040513d602081101561220057600080fd5b5051603954604080516370a0823160e01b815230600482015290519295506001600160a01b039091169182916370a08231916024808301926020929190829003018186803b15801561225157600080fd5b505afa158015612265573d6000803e3d6000fd5b505050506040513d602081101561227b57600080fd5b5051925061228f848463ffffffff6127a116565b915050909192565b6000826122a657506000611f98565b828202828482816122b357fe5b041461206f5760405162461bcd60e51b8152600401808060200182810382526021815260200180612a576021913960400191505060405180910390fd5b600061206f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127fb565b603380546001600160a01b038088166001600160a01b0319928316179092556034805487841690831617905560378054928616929091169190911790558151815181146123bd576040805162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015290519081900360640190fd5b60005b81811015612400576123f88482815181106123d757fe5b60200260200101518483815181106123eb57fe5b6020026020010151611d1b565b6001016123c0565b50505050505050565b6033548290829061242e906001600160a01b038085169116600063ffffffff61286016565b603354612450906001600160a01b03848116911660001963ffffffff61286016565b603354612471906001600160a01b038381169116600063ffffffff61286016565b603354612493906001600160a01b03838116911660001963ffffffff61286016565b6039546124b4906001600160a01b038381169116600063ffffffff61286016565b6039546124d6906001600160a01b03838116911660001963ffffffff61286016565b50505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b612512826001600160a01b0316612973565b612563576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106125a15780518252601f199092019160209182019101612582565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612603576040519150601f19603f3d011682016040523d82523d6000602084013e612608565b606091505b50915091508161265f576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156124d65780806020019051602081101561267b57600080fd5b50516124d65760405162461bcd60e51b815260040180806020018281038252602a815260200180612aa6602a913960400191505060405180910390fd5b600081848411156127475760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561270c5781810151838201526020016126f4565b50505050905090810190601f1680156127395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080612762858563ffffffff61229716565b9050612774818463ffffffff6122f016565b95945050505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b60008282018381101561206f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818361284a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561270c5781810151838201526020016126f4565b50600083858161285657fe5b0495945050505050565b8015806128e6575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156128b857600080fd5b505afa1580156128cc573d6000803e3d6000fd5b505050506040513d60208110156128e257600080fd5b5051155b6129215760405162461bcd60e51b8152600401808060200182810382526036815260200180612ad06036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cf1908490612500565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612025575050151592915050565b6040518060600160405280600390602082028038833950919291505056fe43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726e6f7253bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c6163657343616c6c6572206973206e6f742074686520476f7665726e6f72000000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a72315820b957632a4666137f8f31be3f7282686dec8ad6728c9d1320d678630b1d48c40364736f6c634300050b00327bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80635f515226116100c3578063ad1728cb1161007c578063ad1728cb14610444578063c7af33521461044c578063cd3b021214610454578063d38bfff414610471578063d9caed1214610497578063dbe55e56146104cd5761014d565b80635f515226146102b6578063790fcf9f146102dc578063853828b6146103bf5780639136616a146103c75780639a6acf20146103e4578063aa388af61461040a5761014d565b8063125f9e3311610115578063125f9e33146102005780633587647614610208578063430bf08a1461026057806347e7ef24146102685780635653b414146102945780635d36b190146102ae5761014d565b80630242241d146101525780630c340a241461015c5780630ed57b3a146101805780630fc3b4c4146101ae5780631072cbea146101d4575b600080fd5b61015a6104d5565b005b6101646106e7565b604080516001600160a01b039092168252519081900360200190f35b61015a6004803603604081101561019657600080fd5b506001600160a01b03813581169160200135166106f6565b610164600480360360208110156101c457600080fd5b50356001600160a01b031661074b565b61015a600480360360408110156101ea57600080fd5b506001600160a01b038135169060200135610766565b6101646107cf565b61015a600480360360e081101561021e57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c090910135166107de565b610164610a39565b61015a6004803603604081101561027e57600080fd5b506001600160a01b038135169060200135610a48565b61029c610e1c565b60408051918252519081900360200190f35b61015a610e22565b61029c600480360360208110156102cc57600080fd5b50356001600160a01b0316610e84565b61015a600480360360a08110156102f257600080fd5b6001600160a01b038235811692602081013582169260408201359092169181019060808101606082013564010000000081111561032e57600080fd5b82018360208201111561034057600080fd5b8035906020019184602083028401116401000000008311171561036257600080fd5b91939092909160208101903564010000000081111561038057600080fd5b82018360208201111561039257600080fd5b803590602001918460208302840111640100000000831117156103b457600080fd5b50909250905061103e565b61015a61119d565b61015a600480360360208110156103dd57600080fd5b50356114be565b61015a600480360360208110156103fa57600080fd5b50356001600160a01b0316611689565b6104306004803603602081101561042057600080fd5b50356001600160a01b03166116f2565b604080519115158252519081900360200190f35b61015a611712565b61043061175b565b61015a6004803603602081101561046a57600080fd5b503561177e565b61015a6004803603602081101561048757600080fd5b50356001600160a01b03166117ca565b61015a600480360360608110156104ad57600080fd5b506001600160a01b03813581169160208101359091169060400135611864565b610164611c90565b6034546001600160a01b0316331461052e576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415610586576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255603754603a54604080516370a0823160e01b815230600482015290516001600160a01b03938416939092169160009184916370a0823191602480820192602092909190829003018186803b1580156105e157600080fd5b505afa1580156105f5573d6000803e3d6000fd5b505050506040513d602081101561060b57600080fd5b5051603454604080516001600160a01b0390921682526020820183905280519293507f9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e5205892918290030190a1603954604080516335313c2160e11b81526001600160a01b039283166004820152905191841691636a6278429160248082019260009290919082900301818387803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b50506034546106dc92506001600160a01b038681169250168363ffffffff611c9f16565b505050600182555050565b60006106f1611cf6565b905090565b6106fe61175b565b61073d576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b6107478282611d1b565b5050565b6035602052600090815260409020546001600160a01b031681565b61076e61175b565b6107ad576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b6107476107b86106e7565b6001600160a01b038416908363ffffffff611c9f16565b6037546001600160a01b031681565b6107e661175b565b610825576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b600054610100900460ff168061083e575061083e611e8a565b8061084c575060005460ff16155b6108875760405162461bcd60e51b815260040180806020018281038252602e815260200180612a78602e913960400191505060405180910390fd5b600054610100900460ff161580156108b2576000805460ff1961ff0019909116610100171660011790555b8760005b600381600f0b121561098857866001600160a01b0316826001600160a01b031663c661065783600f0b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561091357600080fd5b505afa158015610927573d6000803e3d6000fd5b505050506040513d602081101561093d57600080fd5b50516001600160a01b0316141561098057603b80546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff600f84900b161790555b6001016108b6565b50603b54600f90810b900b60001914156109df576040805162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b604482015290519081900360640190fd5b603980546001600160a01b038087166001600160a01b031992831617909255603a805492861692909116919091179055610a1c8989898989611e90565b508015610a2f576000805461ff00191690555b5050505050505050565b6034546001600160a01b031681565b6034546001600160a01b03163314610aa1576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415610af9576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560008311610b4b576040805162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015290519081900360640190fd5b603354604080516001600160a01b039283168152602081018690528151928716927f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62929181900390910190a2610b9f6129ac565b603b5484908290600f90810b900b60038110610bb757fe5b60200201526033546001600160a01b03166000610bd387611ede565b90506000610c5f836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1357600080fd5b505afa158015610c27573d6000803e3d6000fd5b505050506040513d6020811015610c3d57600080fd5b5051610c5389601286900363ffffffff611f9e16565b9063ffffffff611ff816565b90506000610c92610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b839063ffffffff61207616565b604051634515cef360e01b81529091506001600160a01b03851690634515cef390879084906004018083606080838360005b83811015610cdc578181015183820152602001610cc4565b5050505090500182815260200192505050600060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b5050506001600160a01b03808b166000908152603560209081526040918290205460395483516370a0823160e01b81523060048201529351918516955090931692636e553f659285926370a0823192602480840193829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051604080516001600160e01b031960e085901b168152600481019290925230602483015251604480830192600092919082900301818387803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b505050505050505050506001825550505050565b60385481565b610e2a61208b565b6001600160a01b0316336001600160a01b031614610e795760405162461bcd60e51b8152600401808060200182810382526030815260200180612b066030913960400191505060405180910390fd5b610e82336120b0565b565b6001600160a01b03818116600090815260356020526040812054909116610ee6576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b6000610ef061215b565b6033546001600160a01b0387811660009081526035602090815260408083205481516318160ddd60e01b81529151969950948416975091955092909116926318160ddd92600480840193919291829003018186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d6020811015610f7b57600080fd5b505190508015611036576000856001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d602081101561100757600080fd5b5051905080156110345761103182611025868463ffffffff61229716565b9063ffffffff6122f016565b94505b505b505050919050565b61104661175b565b611085576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b600054610100900460ff168061109e575061109e611e8a565b806110ac575060005460ff16155b6110e75760405162461bcd60e51b815260040180806020018281038252602e815260200180612a78602e913960400191505060405180910390fd5b600054610100900460ff16158015611112576000805460ff1961ff0019909116610100171660011790555b61118288888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061233292505050565b8015610a2f576000805461ff00191690555050505050505050565b6034546001600160a01b03163314806111ce57506111b96106e7565b6001600160a01b0316336001600160a01b0316145b6112095760405162461bcd60e51b81526004018080602001828103825260238152602001806129cb6023913960400191505060405180910390fd5b6000805160206129ee83398151915280546002811415611261576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255600061126f61215b565b5060395460408051632e1a7d4d60e01b81526004810184905290519294506001600160a01b039091169250632e1a7d4d91602480830192600092919082900301818387803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b50505050600060366000815481106112e857fe5b60009182526020808320909101546001600160a01b039081168084526035835260408085205481516370a0823160e01b81523060048201529151929650909216926370a082319260248082019391829003018186803b15801561134a57600080fd5b505afa15801561135e573d6000803e3d6000fd5b505050506040513d602081101561137457600080fd5b50519050600061139c610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b603354603b5460408051630d2680e960e11b815260048101879052600f92830b830b90920b602483015260448201849052519293506001600160a01b0390911691631a4d01d29160648082019260009290919082900301818387803b15801561140457600080fd5b505af1158015611418573d6000803e3d6000fd5b5050603454604080516370a0823160e01b815230600482015290516114b294506001600160a01b039283169350918716916370a0823191602480820192602092909190829003018186803b15801561146f57600080fd5b505afa158015611483573d6000803e3d6000fd5b505050506040513d602081101561149957600080fd5b50516001600160a01b038616919063ffffffff611c9f16565b50505050600182555050565b6114c661175b565b611505576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603654811061154b576040805162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015290519081900360640190fd5b60006036828154811061155a57fe5b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690600019018310156115fd576036805460001981019081106115a857fe5b600091825260209091200154603680546001600160a01b0390921691859081106115ce57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061160857fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260358552604092839020805490941690935581519085168152905191927f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c92918290030190a2505050565b61169161175b565b6116d0576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0390811660009081526035602052604090205416151590565b6000603660008154811061172257fe5b60009182526020808320909101546001600160a01b03908116808452603590925260409092205490925061175891839116612409565b50565b6000611765611cf6565b6001600160a01b0316336001600160a01b031614905090565b61178661175b565b6117c5576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b603855565b6117d261175b565b611811576040805162461bcd60e51b815260206004820152601a6024820152600080516020612a37833981519152604482015290519081900360640190fd5b61181a816124dc565b806001600160a01b031661182c611cf6565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118bd576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b6000805160206129ee83398151915280546002811415611915576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556001600160a01b038516611968576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b604482015290519081900360640190fd5b600083116119ae576040805162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015290519081900360640190fd5b6001600160a01b03808516600081815260356020908152604091829020548251941684528301869052805191927f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398929081900390910190a2600080611a1161215b565b603354603b546040805163cc2b27d760e01b815260048101859052600f92830b830b90920b6024830152519496509194506001600160a01b03169260009250839163cc2b27d7916044808301926020929190829003018186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d6020811015611aa157600080fd5b505190506000611abb82611025868b63ffffffff61229716565b905080851015611b2b5760395460408051632e1a7d4d60e01b81526004810184905290516001600160a01b0390921691632e1a7d4d9160248082019260009290919082900301818387803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505050505b6000611b4f610c85670de0b6b3a7640000662386f26fc1000063ffffffff61202d16565b603b5460408051630d2680e960e11b815260048101869052600f92830b830b90920b602483015260448201839052519192506001600160a01b03861691631a4d01d29160648082019260009290919082900301818387803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b50611be0925050506001600160a01b038b168c8b611c9f565b604080516370a0823160e01b815230600482015290516000916001600160a01b038d16916370a0823191602480820192602092909190829003018186803b158015611c2a57600080fd5b505afa158015611c3e573d6000803e3d6000fd5b505050506040513d6020811015611c5457600080fd5b505190508015611c7e57603454611c7e906001600160a01b038d811691168363ffffffff611c9f16565b50505050505050600182555050505050565b6033546001600160a01b031681565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cf1908490612500565b505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6001600160a01b038281166000908152603560205260409020541615611d7d576040805162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b6001600160a01b03821615801590611d9d57506001600160a01b03811615155b611de2576040805162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015290519081900360640190fd5b6001600160a01b03808316600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8909301805490951684179094558351918252925191927fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e76592918290030190a26107478282612409565b303b1590565b603380546001600160a01b038088166001600160a01b031992831617909255603480548784169083161790556037805492861692909116919091179055611ed78282611d1b565b5050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1a57600080fd5b505afa158015611f2e573d6000803e3d6000fd5b505050506040513d6020811015611f4457600080fd5b505160ff16905060048110801590611f5d575060128111155b611f985760405162461bcd60e51b8152600401808060200182810382526029815260200180612a0e6029913960400191505060405180910390fd5b92915050565b6000808260000b1315611fc957611fc283600084900b600a0a63ffffffff61229716565b9250611ff1565b60008260000b1215611ff157611fee836000848103900b600a0a63ffffffff6122f016565b92505b5090919050565b60008061201384670de0b6b3a764000063ffffffff61229716565b9050612025818463ffffffff6122f016565b949350505050565b600061206f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126b8565b9392505050565b600061206f8383670de0b6b3a764000061274f565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b03811661210b576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b031661211d611cf6565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36117588161277d565b600080600060356000603660008154811061217257fe5b60009182526020808320909101546001600160a01b0390811684528382019490945260409283019091205482516370a0823160e01b815230600482015292519316926370a08231926024808201939291829003018186803b1580156121d657600080fd5b505afa1580156121ea573d6000803e3d6000fd5b505050506040513d602081101561220057600080fd5b5051603954604080516370a0823160e01b815230600482015290519295506001600160a01b039091169182916370a08231916024808301926020929190829003018186803b15801561225157600080fd5b505afa158015612265573d6000803e3d6000fd5b505050506040513d602081101561227b57600080fd5b5051925061228f848463ffffffff6127a116565b915050909192565b6000826122a657506000611f98565b828202828482816122b357fe5b041461206f5760405162461bcd60e51b8152600401808060200182810382526021815260200180612a576021913960400191505060405180910390fd5b600061206f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127fb565b603380546001600160a01b038088166001600160a01b0319928316179092556034805487841690831617905560378054928616929091169190911790558151815181146123bd576040805162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015290519081900360640190fd5b60005b81811015612400576123f88482815181106123d757fe5b60200260200101518483815181106123eb57fe5b6020026020010151611d1b565b6001016123c0565b50505050505050565b6033548290829061242e906001600160a01b038085169116600063ffffffff61286016565b603354612450906001600160a01b03848116911660001963ffffffff61286016565b603354612471906001600160a01b038381169116600063ffffffff61286016565b603354612493906001600160a01b03838116911660001963ffffffff61286016565b6039546124b4906001600160a01b038381169116600063ffffffff61286016565b6039546124d6906001600160a01b03838116911660001963ffffffff61286016565b50505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b612512826001600160a01b0316612973565b612563576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106125a15780518252601f199092019160209182019101612582565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612603576040519150601f19603f3d011682016040523d82523d6000602084013e612608565b606091505b50915091508161265f576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156124d65780806020019051602081101561267b57600080fd5b50516124d65760405162461bcd60e51b815260040180806020018281038252602a815260200180612aa6602a913960400191505060405180910390fd5b600081848411156127475760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561270c5781810151838201526020016126f4565b50505050905090810190601f1680156127395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080612762858563ffffffff61229716565b9050612774818463ffffffff6122f016565b95945050505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b60008282018381101561206f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818361284a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561270c5781810151838201526020016126f4565b50600083858161285657fe5b0495945050505050565b8015806128e6575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156128b857600080fd5b505afa1580156128cc573d6000803e3d6000fd5b505050506040513d60208110156128e257600080fd5b5051155b6129215760405162461bcd60e51b8152600401808060200182810382526036815260200180612ad06036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cf1908490612500565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612025575050151592915050565b6040518060600160405280600390602082028038833950919291505056fe43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726e6f7253bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c6163657343616c6c6572206973206e6f742074686520476f7665726e6f72000000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a72315820b957632a4666137f8f31be3f7282686dec8ad6728c9d1320d678630b1d48c40364736f6c634300050b0032",
  "devdoc": {
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform This includes any interest that was generated since depositing We calculate this by calculating a what we would get if we withdrawAlld the allocated percentage of this asset.",
        "params": {
          "_asset": "Address of the asset"
        },
        "return": "balance    Total value of the asset in the platform"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardToken()": {
        "details": "Collect accumulated CRV and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into the Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address,address,address,address,address)": {
        "params": {
          "_asset": "Address of the supported asset",
          "_crvGaugeAddress": "Address of the Curve DAO gauge for this pool",
          "_crvMinterAddress": "Address of the CRV minter for rewards",
          "_pToken": "Correspond platform token address (i.e. 3Crv)",
          "_platformAddress": "Address of the Curve 3pool",
          "_rewardTokenAddress": "Address of CRV",
          "_vaultAddress": "Address of the vault"
        }
      },
      "initialize(address,address,address,address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "jGeneric platform address",
          "_rewardTokenAddress": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.     This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding pool tokens,     if for some reason is it necessary."
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.     This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardLiquidationThreshold(uint256)": {
        "details": "Set the reward token liquidation threshold.",
        "params": {
          "_threshold": "Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls."
        }
      },
      "setRewardTokenAddress(address)": {
        "details": "Set the reward token address.",
        "params": {
          "_rewardTokenAddress": "Address of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in     strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    }
  },
  "userdoc": {
    "methods": {
      "initialize(address,address,address,address,address,address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction."
      }
    }
  }
}